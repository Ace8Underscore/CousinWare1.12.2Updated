package io.ace.nordclient.hacks.exploit;

import io.ace.nordclient.CousinWare;
import io.ace.nordclient.command.Command;
import io.ace.nordclient.hacks.Hack;
import io.ace.nordclient.hacks.misc.NotResponding;
import io.ace.nordclient.utilz.Setting;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;

public class ChunkScanner extends Hack {

    private BlockPos pos1= new BlockPos (0,0,0);
    private BlockPos pos2= new BlockPos (0,0,0);
    int x,z;

    Setting x1;
    Setting z1;
    Setting x2;
    Setting z2;
    Setting step;
    Setting amountPerTick;
    Setting debug;

    public ChunkScanner() {
        super("ChunkScanner", Category.EXPLOIT, -1);
        CousinWare.INSTANCE.settingsManager.rSetting(x1 = new Setting("x1", this, 0, -30000000, 30000000, true, "ChunkScannerx1", true));
        CousinWare.INSTANCE.settingsManager.rSetting(z1 = new Setting("z1", this, 0, -30000000, 30000000, true, "ChunkScannerz1", true));
        CousinWare.INSTANCE.settingsManager.rSetting(x2 = new Setting("x2", this, 0, -30000000, 30000000, true, "ChunkScannerx2", true));
        CousinWare.INSTANCE.settingsManager.rSetting(z2 = new Setting("z2", this, 0, -30000000, 30000000, true, "ChunkScannerz2", true));
        CousinWare.INSTANCE.settingsManager.rSetting(step = new Setting("BlockSkip", this, 100, 0, 200, true, "ChunkScannerStep", true));
        CousinWare.INSTANCE.settingsManager.rSetting(amountPerTick = new Setting("PacketsPetTick", this, 9, 0, 11, true, "ChunkScannerAmountPerTick", true));
        CousinWare.INSTANCE.settingsManager.rSetting(debug = new Setting("Debug", this, true, "ChunkScannerDebug", true));





    }

    @Override
    public void onEnable() {
        pos1 = new BlockPos(x1.getValInt(),0,z1.getValInt());
        pos2 = new BlockPos(x2.getValInt(),0,z2.getValInt());
        x = pos1.getX();
        z = pos1.getZ();
    } //

    public void onUpdate() {
        if (mc.player.connection == null || mc.world == null || mc.player == null)
            return;
        if (NotResponding.spontNotTime() > 16)
            return;
        for (int i = 0; i < amountPerTick.getValInt(); i++) {
            if(debug.getValBoolean())
                Command.sendClientSideMessage( x + ", " + z);
            mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.ABORT_DESTROY_BLOCK, new BlockPos(x,0,z), EnumFacing.UP));
            if(x < pos2.getX()){
                x += step.getValInt();
            }
            if(x >= pos2.getX()){
                x = pos1.getX();
                z += step.getValInt();
            }
            if(z > pos2.getZ()){
                Command.sendClientSideMessage("restarting");
                x = pos1.getX();
                z = pos1.getZ();
                return;
            }
        }
    }
    //

    @Override
    public String getHudInfo() {
        return x + "," + z;
    }
}

