buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
    }
    dependencies {
        classpath 'club.minnced:discord-webhooks:0.5.6'
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'com.github.oshi:oshi-core:5.3.4'
        classpath "org.slf4j:slf4j-simple:1.6.1"

    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'

//apply plugin: 'com.github.oshi'

version project.modVersion
group project.modGroup // http://maven.apache.org/guides/mini/guide-naming-conventions.html

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

minecraft {
    version = project.forgeVersion
    runDir = 'run'
    mappings = project.mcpVersion
    coreMod = 'io.ace.nordclient.mixin.NordMixinLoader'
    makeObfSourceJar = false
}

repositories {
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        name = 'impactdevelopment-repo'
        url = 'https://impactdevelopment.github.io/maven/'
    }
    maven {
        name = 'swt-repo'
        url = "http://maven-eclipse.github.io/maven"
    }
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
    mavenCentral()
}

dependencies {
    compile("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }
    compile "club.minnced:discord-webhooks:0.5.6"
    compile 'club.minnced:java-discord-rpc:2.0.1'
    compile 'club.minnced:discord-rpc-release:v3.3.0'
    compile "com.github.cabaletta:baritone:1.2.14"
    compile "cabaletta:baritone-api:1.2"
    compile group: 'net.jodah', name: 'typetools', version: '0.5.0'
    compile group: "com.googlecode.json-simple", name: "json-simple", version: "1.1.1"
    compile group: 'com.github.oshi', name: 'oshi-core', version: '5.3.4'
    compile group: "org.slf4j", name : "slf4j-simple", version: "1.6.1"
    compile group: "org.tinylog", name: "tinylog", version: "1.3.2"
    compile group: 'org.json', name: 'json', version: '20180813'
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '2.7.5'
    compile group: 'com.squareup.okio', name: 'okio', version: '1.6.0'





}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

shadowJar {
    dependencies {
        include(dependency('org.spongepowered:mixin'))
        include(dependency('club.minnced:discord-webhooks:0.5.6'))
        include(dependency('club.minnced:discord-rpc-release:v3.3.0'))
        include(dependency('club.minnced:discord-rpc-release:v3.3.0'))
        include(dependency('net.jodah:typetools'))
        include(dependency('com.googlecode.json-simple:json-simple:1.1.1'))
        include(dependency('cabaletta:baritone-api:1.2'))
        include(dependency('org.json:json'))
        include(dependency("com.squareup.okhttp3:okhttp"))
        include(dependency("com.squareup.okio:okio"))
    }
    exclude 'dummyThing'
    exclude 'LICENSE.txt'
    classifier = 'release'
}

mixin {
    defaultObfuscationEnv searge
    add sourceSets.main, 'mixin.nordclient.refmap.json'
}

reobf {
    shadowJar {
        mappingType = 'SEARGE'
        classpath = sourceSets.main.compileClasspath
    }
}

build.dependsOn(shadowJar)

jar {
    manifest {
        attributes(
                'MixinConfigs': 'mixin.nordclient.json',
                'tweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0,
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLCorePlugin': 'io.ace.nordclient.mixin.NordMixinLoader',
                'ForceLoadAsMod': 'true',
                //'FMLAT': 'nordclient_at.cfg'
        )
    }
}
